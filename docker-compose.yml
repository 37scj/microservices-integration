version: '3.7'

services:

  rabbit:
    image: gabrielltr/rabbitmq:3-management
    build: ./rabbit
    ports:
#      - 1883:1883
#      - 61613:61613
      - 15672:15672
      - 5672:5672
#    healthcheck:
##      test: [ "CMD", "rabbitmqctl" ,"node_health_check" ]
#      test: ["CMD", "rabbitmq-diagnostics", "check_running", "--timeout", "10"]
#      timeout: 1m
#      retries: 10
    #    command: rabbitmq-plugins enable rabbitmq_shovel rabbitmq_shovel_management
#    command: rabbitmq-plugins enable --offline rabbitmq_management rabbitmq_mqtt rabbitmq_stomp rabbitmq_shovel rabbitmq_shovel_management
#    volumes:
#      - ./enabled_plugins:/etc/rabbitmq/enabled_plugins
    networks:
      - ms_network

  db:
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - 3306:3306
    volumes:
      - db-data:/var/lib/mysql
      # - db_scripts/create-db.sql:/docker-entrypoint-initdb.d/001_create-db.sql
    environment:
      MYSQL_ROOT_PASSWORD: 987654321
      MYSQL_USER: dbuser
      MYSQL_PASSWORD: fiappass
      MYSQL_DATABASE: droneDB
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - ms_network

  adminer:
    image: adminer
    ports:
      - 8081:8080
    networks:
      - ms_network

  producer:
    image: gabrielltr/droneproducer:latest
    depends_on:
      - db
      - rabbit
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8020/actuator/health" ]
      interval: 1m10s
      timeout: 10s
      retries: 3
      #start_period: 40s
    ports:
      - 8020:8020
    environment:
      SPRING_RABBITMQ_HOST: rabbit
      SPRING_RABBITMQ_PORT: 5672
      #SPRING_RABBITMQ_ROUTING-KEY: fiap.mba.drone
      DRONE_URL_UPDATE: http://loadbalance:8090/drones/%d
    networks:
      - ms_network

  drone1:
    image: gabrielltr/dronebackend:latest
    #build: ./droneBackend/
    depends_on:
      - db
      - rabbit
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8090/actuator/health" ]
      interval: 1m10s
      timeout: 10s
      retries: 3
      #start_period: 40s
    ports:
      - 8091:8090
    environment:
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 987654321
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/droneDB?serverTimezone=UTC
    networks:
      - ms_network

  # drone2:
  #   image: gabrielltr/dronebackend:latest
  #   #build: ./droneBackend/
  #   depends_on:
  #     - db
  #     - rabbit
  #   healthcheck:
  #     test: [ "CMD", "curl", "-f", "http://localhost:8090/actuator/health" ]
  #     interval: 1m10s
  #     timeout: 10s
  #     retries: 3
  #     #start_period: 40s
  #   ports:
  #     - 8092:8090
  #   environment:
  #     SPRING_DATASOURCE_USERNAME: root
  #     SPRING_DATASOURCE_PASSWORD: 987654321
  #     SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/droneDB?serverTimezone=UTC
  #   networks:
  #     - ms_network

  webapp1:
    image: gabrielltr/icc-react-web-app:latest
    build: ./icc-react-web-app/
    ports:
      - 81:80
#      - 443:443
    environment:
      REACT_APP_API: /api
#      REACT_APP_GMAPSKEY: ${REACT_APP_GMAPSKEY}
#      REACT_APP_GMAPSKEY: ${REACT_APP_GMAPSKEY:AIzaSyD0Rl8_u08deZdD9QJuBWvXmw94lEJlNy0}
    networks:
      - ms_network

#   webapp2:
#     image: gabrielltr/icc-react-web-app:latest
# #    build: ./icc-react-web-app/
#     ports:
#       - 82:80
# #      - 444:444
#     environment:
#       REACT_APP_API: /api
# #      REACT_APP_GMAPSKEY: ${REACT_APP_GMAPSKEY}
# #      REACT_APP_GMAPSKEY: ${REACT_APP_GMAPSKEY:AIzaSyD0Rl8_u08deZdD9QJuBWvXmw94lEJlNy0}
#     networks:
#       - ms_network

  loadbalance:
    depends_on:
      - webapp1
      # - webapp2
      - drone1
      # - drone2
    image: gabrielltr/loadbalance:nginx
    build: ./loadbalance
    ports:
      - 80:80
      - 8090:8090
    networks:
      - ms_network

# TODO adicionar container stopped do node para movimentar os drones

  test:
    image: gabrielltr/testnode:rabbit
    build: ./testSendMessages
    restart: 'no'
    depends_on:
      - rabbit
    labels:
      - test
    environment:
      NODE_RABBIT: 'rabbit:5672'
    networks:
      - ms_network

volumes:
  db-data:

networks:
  ms_network:
